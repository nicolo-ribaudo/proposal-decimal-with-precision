<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Numeric value with fractional digits
stage: -1
contributors: Jesse Alama, Nicolò Ribaudo
</pre>

<emu-clause id="sec-numbers-and-dates" number="21">
  <h1>Numbers and Dates</h1>

  <emu-clause id="sec-withfractionaldigits">
    <h1>Numerics with Fractional Digits</h1>
    <p>A WithFractionalDigits is an object that specifies how another object, such as a Number, can be enriched with additional information about its precision and how that additional precision can be presented. WithFractionalDigits objects are not instantiable; they are created, instead, by calling a suitable method in any object that has the `withFractionalDigits` method in its prototype.</p>
    <emu-clause id="sec-withfractionaldigits-prototype">
      <h1>The %WithFractionalDigitsPrototype% Object</h1>
      <p>The <dfn>%WithFractionalDigitsPrototype%</dfn> object:</p>
      <ul>
        <li>has properties that are inherited by all WithFractionalDigits Objects.</li>
        <li>is an ordinary object.</li>
        <li>has a [[Prototype]] internal slot whose value is Object.prototype.</li>
        <li>has the following properties:</li>
      </ul>

      <emu-clause id="sec-%withfractionaldigitprototype%.numericObject">
        <h1>get %WithFractionalDigitsPrototype%.numericObject</h1>
        <emu-alg>
          1. Let _O_ be the *this* value.
          1. Perform ? RequireInternalSlot(_O_, [[FractionalDigits]]).
          1. Let _N_ be _O_.[[NumericValue]].
          1. Return ! ToObject(_N_).
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-%withfractionaldigitprototype%.fractionalDigits">
        <h1>get %WithFractionalDigitsPrototype%.fractionalDigits</h1>
        <emu-alg>
          1. Let _O_ be the *this* value.
          1. Perform ? RequireInternalSlot(_O_, [[FractionalDigits]]).
          1. Return _O_.[[FractionalDigits]].
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-%withfractionaldigitprototype%.valueof">
        <h1>%WithFractionalDigitsPrototype%.valueOf ( )</h1>
        <emu-alg>
          1. Let _O_ be the *this* value.
          1. Perform ? RequireInternalSlot(_O_, [[FractionalDigits]]).
          1. Let _N_ be _O_.[[NumericValue]].
          1. Return ? ToPrimitive(_N_).
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-%withfractionaldigitprototype%.tostring">
        <h1>%WithFractionalDigitsPrototype%.toString ( )</h1>
        <p>This function performs the following steps when called:</p>
        <emu-alg>
          1. Let _O_ be the *this* value.
          1. Perform ? RequireInternalSlot(_O_, [[FractionalDigits]]).
          1. Let _N_ be _O_.[[NumericValue]].
          1. Let _digits_ be _O_.[[FractionalDigits]].
          1. If _N_ has a [[Decimal128Data]] internal slot, then
            1. Return ? Call(%Decimal.prototype.toFixed%, _N_, « _digits_ »).
          1. Return ? Call(%Number.prototype.toFixed%, _N_, « _digits_ »).
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-%withfractionaldigitprototype%.tolocalestring">
        <h1>%WithFractionalDigitsPrototype%.toLocaleString ( [ _locales_ [ , _options_ ] ] )</h1>

        <emu-note type="editor">
          <p>This will be defined in ECMA-402</p>
        </emu-note>

        <p>This function performs the following steps when called:</p>
        <emu-alg>
          1. Let _O_ be the *this* value.
          1. Perform ? RequireInternalSlot(_O_, [[FractionalDigits]]).
          1. Let _number_ be ! ToIntlMathematicalValue(_O_.[[NumericValue]]).
          1. Let _numberFormat_ be ? Construct(%Intl.NumberFormat%, « _locales_ , _options_ »).
          1. Return FormatNumeric(_numberFormat_, _number_, _O_.[[FractionalDigits]]).
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="intl" number="100">
  <h1>Changes to ECMA-402</h1>

  <emu-clause id="numberformat-objects">
    <h1>NumberFormat Objects</h1>

    <emu-clause id="sec-setnfdigitoptions" type="abstract operation">
      <h1>
        SetNumberFormatDigitOptions (
          _intlObj_: an Object,
          _options_: an Object,
          _mnfdDefault_: an integer,
          _mxfdDefault_: an integer,
          _notation_: a String,
        ): either a normal completion containing ~unused~ or a throw completion
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It populates the internal slots of _intlObj_ that affect locale-independent number rounding (see <emu-xref href="#sec-formatnumberstring"></emu-xref>).</dd>
      </dl>
      <emu-alg>
        1. Let _mnid_ be ? GetNumberOption(_options_, *"minimumIntegerDigits,"*, 1, 21, 1).
        1. Let _mnfd_ be ? Get(_options_, *"minimumFractionDigits"*).
        1. Let _mxfd_ be ? Get(_options_, *"maximumFractionDigits"*).
        1. Let _mnsd_ be ? Get(_options_, *"minimumSignificantDigits"*).
        1. Let _mxsd_ be ? Get(_options_, *"maximumSignificantDigits"*).
        1. Set _intlObj_.[[MinimumIntegerDigits]] to _mnid_.
        1. Let _roundingIncrement_ be ? GetNumberOption(_options_, *"roundingIncrement"*, 1, 5000, 1).
        1. If _roundingIncrement_ is not in « 1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000 », throw a *RangeError* exception.
        1. Let _roundingMode_ be ? GetOption(_options_, *"roundingMode"*, ~string~, « *"ceil"*, *"floor"*, *"expand"*, *"trunc"*, *"halfCeil"*, *"halfFloor"*, *"halfExpand"*, *"halfTrunc"*, *"halfEven"* », *"halfExpand"*).
        1. Let _roundingPriority_ be ? GetOption(_options_, *"roundingPriority"*, ~string~, « *"auto"*, *"morePrecision"*, *"lessPrecision"* », *"auto"*).
        1. Let _trailingZeroDisplay_ be ? GetOption(_options_, *"trailingZeroDisplay"*, ~string~, « *"auto"*, *"stripIfInteger"* », *"auto"*).
        1. NOTE: All fields required by SetNumberFormatDigitOptions have now been read from _options_. The remainder of this AO interprets the options and may throw exceptions.
        1. If _roundingIncrement_ is not 1, set _mxfdDefault_ to _mnfdDefault_.
        1. Set _intlObj_.[[RoundingIncrement]] to _roundingIncrement_.
        1. Set _intlObj_.[[RoundingMode]] to _roundingMode_.
        1. Set _intlObj_.[[TrailingZeroDisplay]] to _trailingZeroDisplay_.
        1. If _mnsd_ is *undefined* and _mxsd_ is *undefined*, let _hasSd_ be *false*. Otherwise, let _hasSd_ be *true*.
        1. If _mnfd_ is *undefined* and _mxsd_ is *undefined*, let _hasFd_ be *false*. Otherwise, let _hasFd_ be *true*.
        1. <ins>If _hasSd_ is *false* ans _hasFd_ is *false*, set _intlObj_.[[UseFallbackFractionalDigits]] to *true*.</ins>
        1. Let _needSd_ be *true*.
        1. Let _needFd_ be *true*.
        1. If _roundingPriority_ is *"auto"*, then
          1. Set _needSd_ to _hasSd_.
          1. If _needSd_ is *true*, or _hasFd_ is *false* and _notation_ is *"compact"*, then
            1. Set _needFd_ to *false*.
        1. If _needSd_ is *true*, then
          1. If _hasSd_ is *true*, then
            1. Set _intlObj_.[[MinimumSignificantDigits]] to ? DefaultNumberOption(_mnsd_, 1, 21, 1).
            1. Set _intlObj_.[[MaximumSignificantDigits]] to ? DefaultNumberOption(_mxsd_, _intlObj_.[[MinimumSignificantDigits]], 21, 21).
          1. Else,
            1. Set _intlObj_.[[MinimumSignificantDigits]] to 1.
            1. Set _intlObj_.[[MaximumSignificantDigits]] to 21.
        1. If _needFd_ is *true*, then
          1. If _hasFd_ is *true*, then
            1. Set _mnfd_ to ? DefaultNumberOption(_mnfd_, 0, 100, *undefined*).
            1. Set _mxfd_ to ? DefaultNumberOption(_mxfd_, 0, 100, *undefined*).
            1. If _mnfd_ is *undefined*, set _mnfd_ to min(_mnfdDefault_, _mxfd_).
            1. Else if _mxfd_ is *undefined*, set _mxfd_ to max(_mxfdDefault_, _mnfd_).
            1. Else if _mnfd_ is greater than _mxfd_, throw a *RangeError* exception.
            1. Set _intlObj_.[[MinimumFractionDigits]] to _mnfd_.
            1. Set _intlObj_.[[MaximumFractionDigits]] to _mxfd_.
          1. Else,
            1. Set _intlObj_.[[MinimumFractionDigits]] to _mnfdDefault_.
            1. Set _intlObj_.[[MaximumFractionDigits]] to _mxfdDefault_.
        1. If _needSd_ is *false* and _needFd_ is *false*, then
          1. Set _intlObj_.[[MinimumFractionDigits]] to 0.
          1. Set _intlObj_.[[MaximumFractionDigits]] to 0.
          1. Set _intlObj_.[[MinimumSignificantDigits]] to 1.
          1. Set _intlObj_.[[MaximumSignificantDigits]] to 2.
          1. Set _intlObj_.[[RoundingType]] to ~more-precision~.
          1. Set _intlObj_.[[ComputedRoundingPriority]] to *"morePrecision"*.
        1. Else if _roundingPriority_ is *"morePrecision"*, then
          1. Set _intlObj_.[[RoundingType]] to ~more-precision~.
          1. Set _intlObj_.[[ComputedRoundingPriority]] to *"morePrecision"*.
        1. Else if _roundingPriority_ is *"lessPrecision"*, then
          1. Set _intlObj_.[[RoundingType]] to ~less-precision~.
          1. Set _intlObj_.[[ComputedRoundingPriority]] to *"lessPrecision"*.
        1. Else if _hasSd_ is *true*, then
          1. Set _intlObj_.[[RoundingType]] to ~significant-digits~.
          1. Set _intlObj_.[[ComputedRoundingPriority]] to *"auto"*.
        1. Else,
          1. Set _intlObj_.[[RoundingType]] to ~fraction-digits~.
          1. Set _intlObj_.[[ComputedRoundingPriority]] to *"auto"*.
        1. If _roundingIncrement_ is not 1, then
          1. If _intlObj_.[[RoundingType]] is not ~fraction-digits~, throw a *TypeError* exception.
          1. If _intlObj_.[[MaximumFractionDigits]] is not _intlObj_.[[MinimumFractionDigits]], throw a *RangeError* exception.
        1. Return ~unused~.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-formatnumberstring" type="abstract operation">
      <h1>
        FormatNumericToString (
          _intlObject_: an Object,
          _x_: a mathematical value or ~negative-zero~,
          <ins>optional _fallbackFractionalDigits_: an integer</ins>
        ): a Record with fields [[RoundedNumber]] (a mathematical value or ~negative-zero~) and [[FormattedString]] (a String)
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It rounds _x_ to an Intl mathematical value according to the internal slots of _intlObject_. The [[RoundedNumber]] field contains the rounded result value and the [[FormattedString]] field contains a String value representation of that result formatted according to the internal slots of _intlObject_.</dd>
      </dl>
      <emu-alg>
        1. Assert: _intlObject_ has [[RoundingMode]], [[RoundingType]], [[MinimumSignificantDigits]], [[MaximumSignificantDigits]], [[MinimumIntegerDigits]], [[MinimumFractionDigits]], [[MaximumFractionDigits]], <ins>[[UseFallbackFractionDigits]],</ins> [[RoundingIncrement]], and [[TrailingZeroDisplay]] internal slots.
        1. If _x_ is ~negative-zero~, then
          1. Let _sign_ be ~negative~.
          1. Set _x_ to 0.
        1. Else,
          1. Assert: _x_ is a mathematical value.
          1. If _x_ &lt; 0, let _sign_ be ~negative~; else let _sign_ be ~positive~.
          1. If _sign_ is ~negative~, then
            1. Set _x_ to -_x_.
        1. <ins>Let _minimumFD_ be _intlObject_.[[MinimumFractionDigits]].</ins>
        1. <ins>Let _maximumFD_ be _intlObject_.[[MaximumFractionDigits]].</ins>
        1. <ins>If _fallbackFractionalDigits_ is provided and is non-negative, then</ins>
          1. <ins>If _minimumFD_ &le; _fallbackFractionalDigits_ and _fallbackFractionalDigits_ &le; _maximumFD_, then</ins>
            1. <ins>Set _minimumFD_ to _fallbackFractionalDigits_.</ins>
            1. <ins>Set _maximumFD_ to _fallbackFractionalDigits_.</ins>
          1. <ins>Else if _intlObject_.[[UseFallbackFractionalDigits]] is *true*, then</ins>
            1. <ins>Set _minimumFD_ to _fallbackFractionalDigits_.</ins>
            1. <ins>Set _maximumFD_ to _fallbackFractionalDigits_.</ins>
        1. Let _unsignedRoundingMode_ be GetUnsignedRoundingMode(_intlObject_.[[RoundingMode]], _sign_).
        1. If _intlObject_.[[RoundingType]] is ~significant-digits~, then
          1. Let _result_ be ToRawPrecision(_x_, _intlObject_.[[MinimumSignificantDigits]], _intlObject_.[[MaximumSignificantDigits]], _unsignedRoundingMode_).
        1. Else if _intlObject_.[[RoundingType]] is ~fraction-digits~, then
          1. Let _result_ be ToRawFixed(_x_, <del>_intlObject_.[[MinimumFractionDigits]]</del><ins>_minimumFD_</ins>, <del>_intlObject_.[[MaximumFractionDigits]]</del><ins>_maximumFD_</ins>, _intlObject_.[[RoundingIncrement]], _unsignedRoundingMode_).
        1. Else,
          1. Let _sResult_ be ToRawPrecision(_x_, _intlObject_.[[MinimumSignificantDigits]], _intlObject_.[[MaximumSignificantDigits]], _unsignedRoundingMode_).
          1. Let _fResult_ be ToRawFixed(_x_, <del>_intlObject_.[[MinimumFractionDigits]]</del><ins>_minimumFD_</ins>, <del>_intlObject_.[[MaximumFractionDigits]]</del><ins>_maximumFD_</ins>, _intlObject_.[[RoundingIncrement]], _unsignedRoundingMode_).
          1. If _intlObject_.[[RoundingType]] is ~more-precision~, then
            1. If _sResult_.[[RoundingMagnitude]] ≤ _fResult_.[[RoundingMagnitude]], then
              1. Let _result_ be _sResult_.
            1. Else,
              1. Let _result_ be _fResult_.
          1. Else,
            1. Assert: _intlObject_.[[RoundingType]] is ~less-precision~.
            1. If _sResult_.[[RoundingMagnitude]] ≤ _fResult_.[[RoundingMagnitude]], then
              1. Let _result_ be _fResult_.
            1. Else,
              1. Let _result_ be _sResult_.
        1. Set _x_ to _result_.[[RoundedNumber]].
        1. Let _string_ be _result_.[[FormattedString]].
        1. If _intlObject_.[[TrailingZeroDisplay]] is *"stripIfInteger"* and <emu-eqn>_x_ modulo 1 = 0</emu-eqn>, then
          1. Let _i_ be StringIndexOf(_string_, *"."*, 0).
          1. If _i_ is not ~not-found~, set _string_ to the substring of _string_ from 0 to _i_.
        1. Let _int_ be _result_.[[IntegerDigitsCount]].
        1. Let _minInteger_ be _intlObject_.[[MinimumIntegerDigits]].
        1. If _int_ &lt; _minInteger_, then
          1. Let _forwardZeros_ be the String consisting of _minInteger_ - _int_ occurrences of the code unit 0x0030 (DIGIT ZERO).
          1. Set _string_ to the string-concatenation of _forwardZeros_ and _string_.
        1. If _sign_ is ~negative~, then
          1. If _x_ is 0, set _x_ to ~negative-zero~. Otherwise, set _x_ to -_x_.
        1. Return the Record { [[RoundedNumber]]: _x_, [[FormattedString]]: _string_ }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-partitionnumberpattern" type="abstract operation">
      <h1>
        PartitionNumberPattern (
          _numberFormat_: an object initialized as a NumberFormat,
          _x_: an Intl mathematical value,
          <ins>optional _fallbackFractionalDigits_: an integer</ins>
        ): a List of Records with fields [[Type]] (a String) and [[Value]] (a String)
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It creates the parts representing the mathematical value of _x_ according to the effective locale and the formatting options of _numberFormat_.</dd>
      </dl>

      <emu-note type="editor">
        <p>PartitionNumberPattern is updated to forward _fallbackFractionalDigits_ to FormatNumericToString.</p>
      </emu-note>
    </emu-clause>

    <emu-clause id="sec-formatnumber" type="abstract operation">
      <h1>
        FormatNumeric (
          _numberFormat_: an Intl.NumberFormat,
          _x_: an Intl mathematical value,
          <ins>optional _fallbackFractionalDigits_: an integer</ins>
        ): a String
      </h1>
      <dl class="header">
      </dl>
      <emu-alg>
        1. <ins>If _fallbackFractionalDigits_ is defined, then</ins>
          1. <ins>Let _parts_ be PartitionNumberPattern(_numberFormat_, _x_, _fallbackFractionalDigits_).</ins>
        1. <ins>Else,</ins>
          1. Let _parts_ be PartitionNumberPattern(_numberFormat_, _x_).
        1. Let _result_ be the empty String.
        1. For each Record { [[Type]], [[Value]] } _part_ of _parts_, do
          1. Set _result_ to the string-concatenation of _result_ and _part_.[[Value]].
        1. Return _result_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="pluralrules-objects">
    <h1>PluralRules Objects</h1>

    <emu-note type="editor">
      <p>Similar changes as in NumberFormat objects.</p>
    </emu-note>
  </emu-clause>
</emu-clause>
